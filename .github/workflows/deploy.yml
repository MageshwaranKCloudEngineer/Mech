name: MechWiz CI/CD Pipeline (Local K8s + Terraform + Observability + Testing)

on:
  push:
    branches:
      - dev
      - test
      - stage
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: mechwiz
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  VERSION_TAG: ${{ github.run_number }}

jobs:
  # 1️⃣ Build & Test with Pytest, Coverage & SonarQube
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          echo "✅ Running pytest with coverage..."
          pytest --cov=app --cov-report=xml --junitxml=pytest-report.xml test_app.py

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: pytest-report.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  # 2️⃣ Docker Build
  build-docker-local:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

  # 3️⃣ Deploy to environment (Dev, Test, Stage, Prod) using kind
  deploy-to-env:
    needs: build-docker-local
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
      url: https://mechwiz-${{ github.ref_name }}.local
    if: |
      github.ref == 'refs/heads/dev' ||
      github.ref == 'refs/heads/test' ||
      github.ref == 'refs/heads/stage' ||
      github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      # 🟢 Setup Docker (required for kind)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # 🟢 Install kind
      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # 🟢 Create local kind cluster
      - name: Create kind cluster
        run: kind create cluster --name mechwiz-cluster

      # 🟢 Verify cluster
      - name: Verify kind cluster
        run: kubectl cluster-info

      - name: Build Docker image locally
        run: |
          echo "🔹 Building local Docker image..."
          docker build -t $IMAGE_NAME:latest .

      # 🟢 Load Docker image into kind
      - name: Load Docker image into kind
        run: kind load docker-image $IMAGE_NAME:latest --name mechwiz-cluster

      # 🟢 Deploy Kubernetes manifests
      - name: Apply Kubernetes manifests
        run: |
          ENV=${{ github.ref_name }}
          echo "🚀 Deploying to $ENV environment"
          kubectl create namespace $ENV --dry-run=client -o yaml | kubectl apply -f -
          kubectl kustomize ./k8s/$ENV | \
            sed "s|IMAGE_TAG|${{ github.run_number }}|g" | \
            sed "s|IMAGE_REPO|$IMAGE_NAME|g" | \
            kubectl apply -n $ENV -f - --validate=false

      # 🟢 Setup Terraform CLI
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # 🟢 Terraform Init, Plan & Apply
      - name: Terraform Init, Plan & Apply
        run: |
          terraform -chdir=./terraform init
          terraform -chdir=./terraform plan -out=plan.tfplan
          terraform -chdir=./terraform apply -auto-approve
        env:
          TF_VAR_image_repo: $IMAGE_NAME
          TF_VAR_image_tag: ${{ github.run_number }}

      # 🟢 Prometheus Health Check
      - name: Prometheus Health Check
        run: |
          ENV=${{ github.ref_name }}
          for i in {1..12}; do
            NOT_READY=$(kubectl get pods -n $ENV --no-headers | grep -v 'Running\|Completed' || true)
            if [ -z "$NOT_READY" ]; then
              echo "✅ All pods are running."
              break
            else
              echo "Waiting for pods to be ready..."
              sleep 10
            fi
          done
          if [ ! -z "$NOT_READY" ]; then
            echo "❌ Pods not ready after 2 minutes. Failing deployment."
            exit 1
          fi

      # 🟢 Deploy Grafana dashboards (optional)
      - name: Deploy Grafana dashboards
        run: |
          ENV=${{ github.ref_name }}
          curl -s -X POST -H "Content-Type: application/json" \
            -d @./grafana/dashboards.json \
            http://admin:admin@grafana-service:3000/api/dashboards/db || echo "⚠️ Dashboard provisioning failed"

  # 4️⃣ Auto-promote Dev → Test
  promote-dev-to-test:
    needs: deploy-to-env
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && needs.deploy-to-env.result == 'success'
    steps:
      - uses: peter-evans/repository-dispatch@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: promote-to-test
          client-payload: '{"branch": "test"}'

  # 5️⃣ Wait for manual approval before Prod
  approve-prod:
    needs: deploy-to-env
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
      url: https://mechwiz-prod.local
    steps:
      - name: Await manual approval
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # 6️⃣ Listener for promotion events
  handle-promotion:
    if: github.event_name == 'repository_dispatch' && github.event.action == 'promote-to-test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "🔥 Dev → Test promotion triggered"
